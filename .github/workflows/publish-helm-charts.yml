name: Publish Helm Charts

on:
  workflow_dispatch:
    inputs:
      chart_version:
        description: 'Chart version override (optional)'
        required: false
        type: string

jobs:
  publish-charts:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Find all charts
        id: find_charts
        run: |
          CHARTS=$(find ./charts -type f -name "Chart.yaml" | sed -e 's|/Chart.yaml||g')
          echo "Found charts in: $CHARTS"
          echo "chart_dirs=$(echo $CHARTS | tr ' ' ',')" >> $GITHUB_OUTPUT

      - name: Package and Push Helm Charts
        run: |
          IFS=',' read -ra CHART_DIRS <<< "${{ steps.find_charts.outputs.chart_dirs }}"
          for CHART_DIR in "${CHART_DIRS[@]}"; do
            echo "Processing chart in $CHART_DIR"

            # Extract chart name and version
            CHART_NAME=$(yq eval '.name' "$CHART_DIR/Chart.yaml")
            CHART_VERSION=$(yq eval '.version' "$CHART_DIR/Chart.yaml")

            # Override version if specified
            if [ -n "${{ inputs.chart_version }}" ]; then
              CHART_VERSION="${{ inputs.chart_version }}"
              echo "Overriding chart version to $CHART_VERSION"
              yq eval '.version = "'"$CHART_VERSION"'"' -i "$CHART_DIR/Chart.yaml"
            fi

            echo "Publishing $CHART_NAME version $CHART_VERSION to GitHub Container Registry"

            # Package and push the chart to GHCR in OCI format
            helm package "$CHART_DIR" --version "$CHART_VERSION"

            # Extract repository name from GitHub repo
            REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

            # Push to GitHub Container Registry in OCI format
            helm push "${CHART_NAME}-${CHART_VERSION}.tgz" "oci://ghcr.io/${REPO_NAME}/charts"

            echo "Successfully published $CHART_NAME version $CHART_VERSION"
          done
